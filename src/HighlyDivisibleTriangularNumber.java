
/**
 * https://projecteuler.net/problem=12
 * 
 * @author St√©phan R.
 *
 */
public class HighlyDivisibleTriangularNumber {

	/**
	 * Calculate number of divisor
	 * n = a^n, b^m, c^q then the number of divisors is (n+1)(m+1)(q+1)
	 * 
	 * @param n
	 */	
	static void getTriangularNumber() {
		boolean[] isNotPrimes = new boolean[(int) ((Math.pow(10, 7) * 8 ) + 1)];
		
		for(int i = 2; i < Math.sqrt(isNotPrimes.length); i++) {
			if(!isNotPrimes[i]) {
				for(int j = (i * i); j < isNotPrimes.length; j += i) {
					isNotPrimes[j] = true;
				}
			}
		}
				
		long triangularNumber = 0;
		long total = 0;
		int n = 3;
		
		while(total < 500) {
			total = 1;
			triangularNumber = (n * (n + 1)) / 2;
			long x = triangularNumber;
			
		    for (int p = 2; p <= x; p++) {
		        if (!isNotPrimes[p]) {
		        	if(p * p < n) {
			            if (x % p == 0) {
			            	int count = 0;
			            	
			                while (x % p == 0) {
			                    x /= p;
			                    count++;
			                }
			                
			                total = total * (count + 1);
			            }
		        	} else {
		        		break;
		        	}	            
		        }
		    }
		    
		    n++;
		}
		
		System.out.println(triangularNumber);	
	}
		
	/**
	 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
	 * The first ten terms would be:
	 * 		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 * 		1: 1
	 * 		3: 1,3
	 * 		6: 1,2,3,6
	 * 		10: 1,2,5,10
	 * 		15: 1,3,5,15
	 * 		21: 1,3,7,21
	 * 		28: 1,2,4,7,14,28
	 * 
	 * We can see that 28 is the first triangle number to have over five divisors.
	 * What is the value of the first triangle number to have over five hundred divisors?
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		long start = System.nanoTime();
		
		getTriangularNumber();
				
		long end = System.nanoTime();
		System.out.println("Solution took " + ((end - start) / 1000000) + "ms");
	}
}
